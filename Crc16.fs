module iM871A_USB.Crc16

open System

module Crc16 =  
    let crc16table =
            [| 0x0000us; 0x1189us; 0x2312us; 0x329Bus; 0x4624us; 0x57ADus; 0x6536us; 0x74BFus;
               0x8C48us; 0x9DC1us; 0xAF5Aus; 0xBED3us; 0xCA6Cus; 0xDBE5us; 0xE97Eus; 0xF8F7us;
               0x1081us; 0x0108us; 0x3393us; 0x221Aus; 0x56A5us; 0x472Cus; 0x75B7us; 0x643Eus;
               0x9CC9us; 0x8D40us; 0xBFDBus; 0xAE52us; 0xDAEDus; 0xCB64us; 0xF9FFus; 0xE876us;
               0x2102us; 0x308Bus; 0x0210us; 0x1399us; 0x6726us; 0x76AFus; 0x4434us; 0x55BDus;
               0xAD4Aus; 0xBCC3us; 0x8E58us; 0x9FD1us; 0xEB6Eus; 0xFAE7us; 0xC87Cus; 0xD9F5us;
               0x3183us; 0x200Aus; 0x1291us; 0x0318us; 0x77A7us; 0x662Eus; 0x54B5us; 0x453Cus;
               0xBDCBus; 0xAC42us; 0x9ED9us; 0x8F50us; 0xFBEFus; 0xEA66us; 0xD8FDus; 0xC974us;
               0x4204us; 0x538Dus; 0x6116us; 0x709Fus; 0x0420us; 0x15A9us; 0x2732us; 0x36BBus;
               0xCE4Cus; 0xDFC5us; 0xED5Eus; 0xFCD7us; 0x8868us; 0x99E1us; 0xAB7Aus; 0xBAF3us;
               0x5285us; 0x430Cus; 0x7197us; 0x601Eus; 0x14A1us; 0x0528us; 0x37B3us; 0x263Aus;
               0xDECDus; 0xCF44us; 0xFDDFus; 0xEC56us; 0x98E9us; 0x8960us; 0xBBFBus; 0xAA72us;
               0x6306us; 0x728Fus; 0x4014us; 0x519Dus; 0x2522us; 0x34ABus; 0x0630us; 0x17B9us;
               0xEF4Eus; 0xFEC7us; 0xCC5Cus; 0xDDD5us; 0xA96Aus; 0xB8E3us; 0x8A78us; 0x9BF1us;
               0x7387us; 0x620Eus; 0x5095us; 0x411Cus; 0x35A3us; 0x242Aus; 0x16B1us; 0x0738us;
               0xFFCFus; 0xEE46us; 0xDCDDus; 0xCD54us; 0xB9EBus; 0xA862us; 0x9AF9us; 0x8B70us;
               0x8408us; 0x9581us; 0xA71Aus; 0xB693us; 0xC22Cus; 0xD3A5us; 0xE13Eus; 0xF0B7us;
               0x0840us; 0x19C9us; 0x2B52us; 0x3ADBus; 0x4E64us; 0x5FEDus; 0x6D76us; 0x7CFFus;
               0x9489us; 0x8500us; 0xB79Bus; 0xA612us; 0xD2ADus; 0xC324us; 0xF1BFus; 0xE036us;
               0x18C1us; 0x0948us; 0x3BD3us; 0x2A5Aus; 0x5EE5us; 0x4F6Cus; 0x7DF7us; 0x6C7Eus;
               0xA50Aus; 0xB483us; 0x8618us; 0x9791us; 0xE32Eus; 0xF2A7us; 0xC03Cus; 0xD1B5us;
               0x2942us; 0x38CBus; 0x0A50us; 0x1BD9us; 0x6F66us; 0x7EEFus; 0x4C74us; 0x5DFDus;
               0xB58Bus; 0xA402us; 0x9699us; 0x8710us; 0xF3AFus; 0xE226us; 0xD0BDus; 0xC134us;
               0x39C3us; 0x284Aus; 0x1AD1us; 0x0B58us; 0x7FE7us; 0x6E6Eus; 0x5CF5us; 0x4D7Cus;
               0xC60Cus; 0xD785us; 0xE51Eus; 0xF497us; 0x8028us; 0x91A1us; 0xA33Aus; 0xB2B3us;
               0x4A44us; 0x5BCDus; 0x6956us; 0x78DFus; 0x0C60us; 0x1DE9us; 0x2F72us; 0x3EFBus;
               0xD68Dus; 0xC704us; 0xF59Fus; 0xE416us; 0x90A9us; 0x8120us; 0xB3BBus; 0xA232us;
               0x5AC5us; 0x4B4Cus; 0x79D7us; 0x685Eus; 0x1CE1us; 0x0D68us; 0x3FF3us; 0x2E7Aus;
               0xE70Eus; 0xF687us; 0xC41Cus; 0xD595us; 0xA12Aus; 0xB0A3us; 0x8238us; 0x93B1us;
               0x6B46us; 0x7ACFus; 0x4854us; 0x59DDus; 0x2D62us; 0x3CEBus; 0x0E70us; 0x1FF9us;
               0xF78Fus; 0xE606us; 0xD49Dus; 0xC514us; 0xB1ABus; 0xA022us; 0x92B9us; 0x8330us;
               0x7BC7us; 0x6A4Eus; 0x58D5us; 0x495Cus; 0x3DE3us; 0x2C6Aus; 0x1EF1us; 0x0F78us; |]
            
    let compute(bytes: byte seq) =
        let mutable crc = 0xFFFFus
        
        bytes
        |> Seq.iter(fun b -> crc <- (crc >>> 8) ^^^ crc16table.[int ((crc ^^^ uint16 b) &&& 0xFFus)])
        
        crc <- ~~~crc
        crc
        
    let computeBytes(bytes: byte seq) =
        BitConverter.GetBytes(compute(bytes)) |> Array.rev


type CrcMode =
    | Standard = 0xA001us
    | Kermit = 0x8408us

type Crc162(crcMode : CrcMode) =
    static let table = Array.create 256 0us
    
    //let polynomial = uint16(crcMode)
    static let polynomial = CrcMode.Kermit |> uint16
    static let mutable value = 0us
    static let mutable temp = 0us
    
    // Setup the CRC table
    static do
        for i in {0us..(table.Length-1 |> uint16)} do
            value <- 0us
            temp <- i
            for j in {0uy..7uy} do
                if ((value ^^^ temp) &&& 0x0001us) <> 0us
                then value <- (uint16)((value >>> 1) ^^^ polynomial)
                else value <- value >>> 1
                temp <- temp >>> 1
            table.[(int)i] <- value
    
    static member Compute(bytes: byte list) =
        let mutable crc = 0us
        for i in {0..bytes.Length-1} do
            let index = (byte)(crc ^^^ uint16 bytes.[i])
            crc <- (uint16)((crc >>> 8) ^^^ table.[int index])
        crc
        
    static member ComputeBytes(bytes: byte list) = 
        BitConverter.GetBytes(Crc162.Compute(bytes)) |> Array.rev


